{"version":3,"sources":["App.tsx","components/HomePage/HomePage.tsx","components/Loader/Loader.tsx","api.ts","utils/searchHelper.ts","utils/SearchLink.tsx","utils/OrderControl.tsx","components/PeopleFilters/PeopleFilters.tsx","components/PeopleTable/PeopleTable.tsx","components/PeoplePage/PeoplePage.tsx","components/NotFound/NotFound.tsx","Root.tsx","index.tsx"],"names":["getLinkClass","isActive","classNames","App","className","role","to","HomePage","Loader","API_URL","wait","delay","Promise","resolve","setTimeout","then","fetch","response","json","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","search","OrderControl","sort","currentSort","get","currentOrder","newSort","newOrder","order","handleOrder","cn","PeopleFilters","setSearchParams","centuries","getAll","sex","type","placeholder","onChange","event","query","target","from","length","_","index","num","century","String","includes","filter","onClick","clearCentury","href","PeopleTable","person","name","born","died","fatherName","motherName","slug","mother","father","personSlug","useParams","PeoplePage","useState","people","setPeople","isLoading","setIsLoading","isError","setIsError","useEffect","getPeople","peopleFromServer","map","find","fath","moth","getPreparedPeople","catch","finally","displayedPeople","filteredPeople","gender","Math","ceil","Number","toLowerCase","toLocaleLowerCase","a","b","localeCompare","reverse","NotFound","Root","path","element","replace","createRoot","document","getElementById","render"],"mappings":"0QAIMA,EAAe,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,SACtB,OAAOC,IAAW,cAAe,CAC/B,8BAA+BD,GAElC,EAEYE,EAAM,WACjB,OACE,sBAAK,UAAQ,MAAb,UACE,qBACE,UAAQ,MACRC,UAAU,iCACVC,KAAK,aACL,aAAW,kBAJb,SAME,qBAAKD,UAAU,YAAf,SACE,sBAAKA,UAAU,eAAf,UACE,cAAC,IAAD,CAASA,UAAWJ,EAAcM,GAAG,IAArC,kBAGA,cAAC,IAAD,CACEF,UAAWJ,EACXM,GAAG,UAFL,2BAUN,sBAAMF,UAAU,UAAhB,SACE,qBAAKA,UAAU,YAAf,SACE,cAAC,IAAD,UAKT,ECzCYG,EAAW,kBACtB,oBAAIH,UAAU,QAAd,sBADsB,E,6BCEXI,G,MAAS,kBACpB,qBAAKJ,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,qBAFG,G,cCChBK,EAAU,oEAEhB,SAASC,EAAKC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,EAAxB,GAC3B,C,sDAEM,iHAEED,EAAK,KACTK,MAAK,kBAAMC,MAAMP,EAAZ,IACLM,MAAK,SAAAE,GAAQ,OAAIA,EAASC,MAAb,KAJX,4C,kCCDA,SAASC,EACdC,EACAC,GAGA,IAAMC,EAAY,IAAIC,gBACpBH,EAAcI,YA+BhB,OAjBAC,OAAOC,QAAQL,GACZM,SAAQ,YAAmB,IAAD,mBAAhBC,EAAgB,KAAXC,EAAW,KACX,OAAVA,EACFP,EAAUQ,OAAOF,GACRG,MAAMC,QAAQH,IAEvBP,EAAUQ,OAAOF,GAEjBC,EAAMF,SAAQ,SAAAM,GACZX,EAAUY,OAAON,EAAKK,EACvB,KAEDX,EAAUa,IAAIP,EAAKC,EAEtB,IAGIP,EAAUE,UAClB,C,4BC/BYY,EAA8B,SAAC,GAIrC,IAHLC,EAGI,EAHJA,SACAC,EAEI,EAFJA,OACGC,EACC,iBACJ,EAAuBC,cAAhBC,EAAP,oBAEA,OACE,cAAC,IAAD,yBAIEnC,GAAI,CACFoC,OAAQvB,EAAcsB,EAAcH,KAElCC,GAPN,aASGF,IAGN,EC3BYM,EAAe,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,KAC7B,EAAuBJ,cAAhBC,EAAP,oBAqBA,OACE,cAAC,EAAD,CAAYH,OApBM,WAClB,IAAMO,EAAcJ,EAAaK,IAAI,QAC/BC,EAAeN,EAAaK,IAAI,SAElCE,EAAyB,KACzBC,EAA0B,KAW9B,OATKJ,IACHG,EAAUJ,GAGRC,IAAgBD,GAASG,IAC3BC,EAAUJ,EACVK,EAAW,QAGN,CAAEL,KAAMI,EAASE,MAAOD,EAChC,CAGqBE,GAApB,SACE,sBAAM/C,UAAU,OAAhB,SACE,mBAAGA,UAAWgD,IAAG,cAAe,CAC9B,aAAcX,EAAaK,IAAI,UAAYF,IACrCH,EAAaK,IAAI,SACvB,eAAgBL,EAAaK,IAAI,UAAYF,KACtCH,EAAaK,IAAI,gBAMjC,ECrCYO,EAA0B,WACrC,MAAwCb,cAAxC,mBAAOC,EAAP,KAAqBa,EAArB,KAEMC,EAAYd,EAAae,OAAO,cAAgB,GAetD,OACE,sBAAKpD,UAAU,QAAf,UACE,mBAAGA,UAAU,gBAAb,qBAEA,oBAAGA,UAAU,aAAa,UAAQ,YAAlC,UACE,cAAC,EAAD,CACEA,UAAWgD,IAAG,CAAE,aAAcX,EAAaK,IAAI,SAC/CR,OAAQ,CAAEmB,IAAK,MAFjB,iBAMA,cAAC,EAAD,CACErD,UAAWgD,IAAG,CAAE,YAAyC,MAA5BX,EAAaK,IAAI,SAC9CR,OAAQ,CAAEmB,IAAK,KAFjB,kBAMA,cAAC,EAAD,CACErD,UAAWgD,IAAG,CAAE,YAAyC,MAA5BX,EAAaK,IAAI,SAC9CR,OAAQ,CAAEmB,IAAK,KAFjB,uBAQF,qBAAKrD,UAAU,cAAf,SACE,oBAAGA,UAAU,yBAAb,UACE,uBACE,UAAQ,aACRsD,KAAK,SACLtD,UAAU,QACVuD,YAAY,SACZC,SAAU,SAACC,GACT,IAAMvB,EAASnB,EACbsB,EAAc,CAAEqB,MAAOD,EAAME,OAAOlC,OAAS,OAG/CyB,EAAgBhB,EACjB,IAGH,sBAAMlC,UAAU,eAAhB,SACE,mBAAGA,UAAU,gBAAgB,cAAY,gBAK/C,qBAAKA,UAAU,cAAf,SACE,sBAAKA,UAAU,iCAAiC,UAAQ,gBAAxD,UACE,qBAAKA,UAAU,aAAf,SACG2B,MAAMiC,KAAK,CAAEC,OAAQ,IAAK,SAACC,EAAGC,GAC7B,IAhEWC,EAgELC,EAAUC,OAAOH,EAAQ,IAE/B,OACE,cAAC,EAAD,CAEE,UAAQ,UACR/D,UAAS,2CACLmD,EAAUgB,SAASF,GAAW,UAAY,IAE9C/B,OAAQ,CAAEiB,WAzEHa,EAyE4BC,EAxE1Cd,EAAUgB,SAASH,GACtBb,EAAUiB,QAAO,SAAAH,GAAO,OAAIA,IAAYD,CAAhB,IADrB,sBAECb,GAFD,CAEYa,MAgEP,SAQGC,GAPIA,EAUV,MAGH,qBAAKjE,UAAU,mBAAf,SACE,cAAC,EAAD,CACE,UAAQ,aACRA,UAAWgD,IAAG,cAAe,CAC3B,cAAeX,EAAaK,IAAI,eAElCR,OAAQ,CAAEiB,UAAW,IACrBkB,QAAS,kBAlFrB,WACE,IAAMnC,EAAS,IAAIf,gBAAgBkB,GAEnCH,EAAOR,OAAO,aACdwB,EAAgBhB,EACjB,CA6E0BoC,EAAN,EANX,wBAcN,qBAAKtE,UAAU,cAAf,SACE,mBACEA,UAAU,0CACVuE,KAAK,WAFP,mCASP,EC7GYC,EAA+B,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAE3CC,EASED,EATFC,KACArB,EAQEoB,EARFpB,IACAsB,EAOEF,EAPFE,KACAC,EAMEH,EANFG,KACAC,EAKEJ,EALFI,WACAC,EAIEL,EAJFK,WACAC,EAGEN,EAHFM,KACAC,EAEEP,EAFFO,OACAC,EACER,EADFQ,OAGMC,EAAeC,cAAfD,WAER,OACE,qBACE,UAAQ,SACRlF,UAAWF,IAAW,CACpB,yBAA0BiF,IAASG,IAHvC,UAME,6BACE,cAAC,IAAD,CACElF,UAAWF,IAAW,CACpB,kBAA2B,MAARuD,IAErBnD,GAAE,aAAQ6E,GAJZ,SAMGL,MAIL,6BAAKrB,IACL,6BAAKsB,IACL,6BAAKC,IACL,6BACGI,EACC,cAAC,IAAD,CACEhF,UAAU,kBACVE,GAAE,aAAQ8E,EAAOD,MAFnB,SAIGD,IAGHA,GAAc,MAGlB,6BACGG,EACC,cAAC,IAAD,CAAM/E,GAAE,aAAQ+E,EAAOF,MAAvB,SACGF,IAGHA,GAAc,QAKvB,EC7CYO,EAAuB,WAClC,MAA4BC,mBAAmB,IAA/C,mBAAOC,EAAP,KAAeC,EAAf,KAEA,EAAuBnD,cAAhBC,EAAP,oBAEA,EAAkCgD,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KAEAC,qBAAU,YNrBL,WAAP,gCMsBIC,GACGlF,MAAK,SAACmF,GACLP,EAxBkB,SAACD,GACzB,OAAOA,EAAOS,KAAI,SAAAtB,GAChB,IAAMQ,EAASK,EAAOU,MAAK,SAAAC,GAAI,OAAIA,EAAKvB,OAASD,EAAOI,UAAzB,IACzBG,EAASM,EAAOU,MAAK,SAAAE,GAAI,OAAIA,EAAKxB,OAASD,EAAOK,UAAzB,IAE/B,OAAO,2BACFL,GADL,IAEEQ,SACAD,UAEH,GACF,CAaiBmB,CAAkBL,GAC7B,IACAM,OAAM,kBAAMT,GAAW,EAAjB,IACNU,SAAQ,kBAAMZ,GAAa,EAAnB,GACZ,GAAE,IAEH,IAAMa,EAAkB,WACtB,IAAIC,EAAc,YAAOjB,GAEnBnC,EAAYd,EAAae,OAAO,cAAgB,GAChDoD,EAASnE,EAAaK,IAAI,QAAU,GACpCgB,EAAQrB,EAAaK,IAAI,UAAY,GAE3C6D,EAAiBpD,EAAUU,OAAS,EAChC0C,EAAenC,QAAO,SAAAK,GAAM,OAAItB,EAC/BgB,SAAUsC,KAAKC,KAAKC,OAAOlC,EAAOE,MAAQ,KAAMvD,WADrB,IAE5BmF,EAEJA,EAAiBC,EACbD,EAAenC,QAAO,SAAAK,GAAM,OAAIA,EAAOpB,MAAQmD,CAAnB,IAC5BD,EAEJA,EAAiB7C,EACb6C,EAAenC,QAAO,SAAAK,GAAM,eAC5BA,EAAOC,KAAKkC,cAAczC,SAAST,EAAMkD,iBADT,UAE7BnC,EAAOK,kBAFsB,aAE7B,EAAmB+B,oBACnB1C,SAAST,EAAMmD,wBAHc,UAI7BpC,EAAOI,kBAJsB,aAI7B,EAAmBgC,oBACnB1C,SAAST,EAAMmD,qBALU,IAM5BN,EAEJ,IAAM/D,EAAOH,EAAaK,IAAI,QAsB9B,OApBIF,IACW,SAATA,GAA4B,SAATA,GACrB+D,EAAe/D,MAAK,SAACsE,EAAGC,GACtB,OAAOD,EAAEtE,GAAQuE,EAAEvE,EACpB,IAGU,SAATA,GAA4B,QAATA,GACrB+D,EAAe/D,MAAK,SAACsE,EAAGC,GACtB,OAAOD,EAAEtE,GAAMwE,cAAcD,EAAEvE,GAChC,KAISH,EAAaK,IAAI,UAG7B6D,EAAeU,UAGVV,CACR,EAED,OACE,qCACE,oBAAIvG,UAAU,QAAd,yBAEA,qBAAKA,UAAU,QAAf,SACE,sBAAKA,UAAU,mDAAf,UACE,qBAAKA,UAAU,uCAAf,SACE,cAAC,EAAD,MAGF,qBAAKA,UAAU,SAAf,SACE,sBAAKA,UAAU,sBAAf,UACGwF,GAAa,cAAC,EAAD,IAEbE,GACC,mBAAG,UAAQ,qBAAqB1F,UAAU,kBAA1C,mCAKAwF,IAAcF,EAAOzB,QACrB,mBAAG,UAAQ,kBAAX,gDAKAyC,KACA,2FAGChB,EAAOzB,QACR,wBACE,UAAQ,cACR7D,UAAU,yDAFZ,UAME,gCACE,+BACE,6BACE,uBAAMA,UAAU,8BAAhB,iBAEE,cAAC,EAAD,CAAcwC,KAAK,cAIvB,6BACE,uBAAMxC,UAAU,8BAAhB,gBAEE,cAAC,EAAD,CAAcwC,KAAK,aAKvB,6BACE,uBAAMxC,UAAU,8BAAhB,iBAEE,cAAC,EAAD,CAAcwC,KAAK,cAIvB,6BACE,uBAAMxC,UAAU,8BAAhB,iBAEE,cAAC,EAAD,CAAcwC,KAAK,cAIvB,wCACA,6CAIJ,gCACG8D,IAAkBP,KAAI,SAAAtB,GAAM,OAC3B,cAAC,EAAD,CAEEA,OAAQA,GADHA,EAAOM,KAFa,qBAehD,EClLYmC,EAAW,kBACtB,oBAAIlH,UAAU,QAAd,2BADsB,ECOXmH,EAAO,kBAClB,cAAC,IAAD,UACE,eAAC,IAAD,CAAOC,KAAK,IAAIC,QAAS,cAAC,EAAD,IAAzB,UACE,cAAC,IAAD,CAAOtD,OAAK,EAACsD,QAAS,cAAC,EAAD,MACtB,cAAC,IAAD,CAAOD,KAAK,OAAOC,QAAS,cAAC,IAAD,CAAUnH,GAAG,IAAIoH,SAAO,MACpD,cAAC,IAAD,CAAOF,KAAK,SAAZ,SACE,cAAC,IAAD,CAAOA,KAAK,eAAeC,QAAS,cAAC,EAAD,QAEtC,cAAC,IAAD,CAAOD,KAAK,IAAIC,QAAS,cAAC,EAAD,UARX,ECCpBE,qBAAWC,SAASC,eAAe,SAChCC,OACC,cAAC,IAAD,UACE,cAAC,EAAD,M","file":"static/js/main.9891781c.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { NavLink, Outlet } from 'react-router-dom';\nimport './App.scss';\n\nconst getLinkClass = ({ isActive }: { isActive: boolean }) => {\n  return classNames('navbar-item', {\n    'has-background-grey-lighter': isActive,\n  });\n};\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <nav\n        data-cy=\"nav\"\n        className=\"navbar is-fixed-top has-shadow\"\n        role=\"navigation\"\n        aria-label=\"main navigation\"\n      >\n        <div className=\"container\">\n          <div className=\"navbar-brand\">\n            <NavLink className={getLinkClass} to=\"/\">\n              Home\n            </NavLink>\n            <NavLink\n              className={getLinkClass}\n              to=\"/people\"\n            >\n              People\n            </NavLink>\n          </div>\n        </div>\n      </nav>\n\n      <main className=\"section\">\n        <div className=\"container\">\n          <Outlet />\n        </div>\n      </main>\n    </div>\n  );\n};\n","export const HomePage = () => (\n  <h1 className=\"title\">Home Page</h1>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Person } from './types/Person';\r\n\r\n// eslint-disable-next-line max-len\r\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\r\n\r\nfunction wait(delay: number) {\r\n  return new Promise(resolve => setTimeout(resolve, delay));\r\n}\r\n\r\nexport async function getPeople(): Promise<Person[]> {\r\n  // keep this delay for testing purpose\r\n  return wait(500)\r\n    .then(() => fetch(API_URL))\r\n    .then(response => response.json());\r\n}\r\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from './searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","import { useSearchParams } from 'react-router-dom';\nimport cn from 'classnames';\nimport { SearchLink } from './SearchLink';\n\ntype OrderControlProps = {\n  sort: string;\n};\n\nexport const OrderControl = ({ sort }: OrderControlProps) => {\n  const [searchParams] = useSearchParams();\n\n  const handleOrder = () => {\n    const currentSort = searchParams.get('sort');\n    const currentOrder = searchParams.get('order');\n\n    let newSort: string | null = null;\n    let newOrder: string | null = null;\n\n    if (!currentSort) {\n      newSort = sort;\n    }\n\n    if (currentSort === sort && !currentOrder) {\n      newSort = sort;\n      newOrder = 'desc';\n    }\n\n    return { sort: newSort, order: newOrder };\n  };\n\n  return (\n    <SearchLink params={handleOrder()}>\n      <span className=\"icon\">\n        <i className={cn('fas fa-sort', {\n          'fa-sort-up': searchParams.get('sort') === sort\n            && !searchParams.get('order'),\n          'fa-sort-down': searchParams.get('sort') === sort\n            && !!searchParams.get('order'),\n        })}\n        />\n      </span>\n    </SearchLink>\n  );\n};\n","import React from 'react';\nimport cn from 'classnames';\nimport { useSearchParams } from 'react-router-dom';\nimport { SearchLink } from '../../utils/SearchLink';\nimport { getSearchWith } from '../../utils/searchHelper';\n\nexport const PeopleFilters: React.FC = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const centuries = searchParams.getAll('centuries') || [];\n\n  function toggleCentury(num: string) {\n    return centuries.includes(num)\n      ? centuries.filter(century => century !== num)\n      : [...centuries, num];\n  }\n\n  function clearCentury() {\n    const params = new URLSearchParams(searchParams);\n\n    params.delete('centuries');\n    setSearchParams(params);\n  }\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          className={cn({ 'is-active': !searchParams.get('sex') })}\n          params={{ sex: null }}\n        >\n          All\n        </SearchLink>\n        <SearchLink\n          className={cn({ 'is-active': searchParams.get('sex') === 'm' })}\n          params={{ sex: 'm' }}\n        >\n          Male\n        </SearchLink>\n        <SearchLink\n          className={cn({ 'is-active': searchParams.get('sex') === 'f' })}\n          params={{ sex: 'f' }}\n        >\n          Female\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            onChange={(event) => {\n              const params = getSearchWith(\n                searchParams, { query: event.target.value || null },\n              );\n\n              setSearchParams(params);\n            }}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {Array.from({ length: 5 }, (_, index) => {\n              const century = String(index + 16);\n\n              return (\n                <SearchLink\n                  key={century}\n                  data-cy=\"century\"\n                  className={`button mr-1\n                    ${centuries.includes(century) ? 'is-info' : ''\n                }`}\n                  params={{ centuries: toggleCentury(century) }}\n                >\n                  {century}\n                </SearchLink>\n              );\n            })}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className={cn('button mr-1', {\n                'is-success': !searchParams.get('centuries'),\n              })}\n              params={{ centuries: [] }}\n              onClick={() => clearCentury()}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <a\n          className=\"button is-link is-outlined is-fullwidth\"\n          href=\"#/people\"\n        >\n          Reset all filters\n        </a>\n      </div>\n    </nav>\n  );\n};\n","import { Link, useParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { Person } from '../../types';\n\ntype Props = {\n  person: Person\n};\n\nexport const PeopleTable: React.FC<Props> = ({ person }) => {\n  const {\n    name,\n    sex,\n    born,\n    died,\n    fatherName,\n    motherName,\n    slug,\n    mother,\n    father,\n  } = person;\n\n  const { personSlug } = useParams();\n\n  return (\n    <tr\n      data-cy=\"person\"\n      className={classNames({\n        'has-background-warning': slug === personSlug,\n      })}\n    >\n      <td>\n        <Link\n          className={classNames({\n            'has-text-danger': sex === 'f',\n          })}\n          to={`../${slug}`}\n        >\n          {name}\n        </Link>\n      </td>\n\n      <td>{sex}</td>\n      <td>{born}</td>\n      <td>{died}</td>\n      <td>\n        {mother ? (\n          <Link\n            className=\"has-text-danger\"\n            to={`../${mother.slug}`}\n          >\n            {motherName}\n          </Link>\n        ) : (\n          motherName || '-'\n        )}\n      </td>\n      <td>\n        {father ? (\n          <Link to={`../${father.slug}`}>\n            {fatherName}\n          </Link>\n        ) : (\n          fatherName || '-'\n        )}\n      </td>\n    </tr>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { Loader } from '../Loader';\nimport { Person } from '../../types';\nimport { getPeople } from '../../api';\nimport { OrderControl } from '../../utils/OrderControl';\nimport { PeopleFilters } from '../PeopleFilters/PeopleFilters';\nimport { PeopleTable } from '../PeopleTable/PeopleTable';\n\nconst getPreparedPeople = (people: Person[]) => {\n  return people.map(person => {\n    const father = people.find(fath => fath.name === person.fatherName);\n    const mother = people.find(moth => moth.name === person.motherName);\n\n    return {\n      ...person,\n      father,\n      mother,\n    };\n  });\n};\n\nexport const PeoplePage: React.FC = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n\n  const [searchParams] = useSearchParams();\n\n  const [isLoading, setIsLoading] = useState(true);\n  const [isError, setIsError] = useState(false);\n\n  useEffect(() => {\n    getPeople()\n      .then((peopleFromServer) => {\n        setPeople(getPreparedPeople(peopleFromServer));\n      })\n      .catch(() => setIsError(true))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const displayedPeople = () => {\n    let filteredPeople = [...people];\n\n    const centuries = searchParams.getAll('centuries') || [];\n    const gender = searchParams.get('sex') || '';\n    const query = searchParams.get('query') || '';\n\n    filteredPeople = centuries.length > 0\n      ? filteredPeople.filter(person => centuries\n        .includes((Math.ceil(Number(person.born) / 100)).toString()))\n      : filteredPeople;\n\n    filteredPeople = gender\n      ? filteredPeople.filter(person => person.sex === gender)\n      : filteredPeople;\n\n    filteredPeople = query\n      ? filteredPeople.filter(person => (\n        person.name.toLowerCase().includes(query.toLowerCase()))\n        || person.motherName?.toLocaleLowerCase()\n          .includes(query.toLocaleLowerCase())\n        || person.fatherName?.toLocaleLowerCase()\n          .includes(query.toLocaleLowerCase()))\n      : filteredPeople;\n\n    const sort = searchParams.get('sort');\n\n    if (sort) {\n      if (sort === 'born' || sort === 'died') {\n        filteredPeople.sort((a, b) => {\n          return a[sort] - b[sort];\n        });\n      }\n\n      if (sort === 'name' || sort === 'sex') {\n        filteredPeople.sort((a, b) => {\n          return a[sort].localeCompare(b[sort]);\n        });\n      }\n    }\n\n    const order = searchParams.get('order');\n\n    if (order) {\n      filteredPeople.reverse();\n    }\n\n    return filteredPeople;\n  };\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          <div className=\"column is-7-tablet is-narrow-desktop\">\n            <PeopleFilters />\n          </div>\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isLoading && <Loader />}\n\n              {isError && (\n                <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                  Something went wrong\n                </p>\n              )}\n\n              {!isLoading && !people.length && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n\n              {!displayedPeople() && (\n                <p>There are no people matching the current search criteria</p>\n              )}\n\n              {!!people.length && (\n                <table\n                  data-cy=\"peopleTable\"\n                  className=\"\n                    table is-striped is-hoverable is-narrow is-fullwidth\n                  \"\n                >\n                  <thead>\n                    <tr>\n                      <th>\n                        <span className=\"is-flex is-flex-wrap-nowrap\">\n                          Name\n                          <OrderControl sort=\"name\" />\n                        </span>\n                      </th>\n\n                      <th>\n                        <span className=\"is-flex is-flex-wrap-nowrap\">\n                          Sex\n                          <OrderControl sort=\"sex\" />\n\n                        </span>\n                      </th>\n\n                      <th>\n                        <span className=\"is-flex is-flex-wrap-nowrap\">\n                          Born\n                          <OrderControl sort=\"born\" />\n                        </span>\n                      </th>\n\n                      <th>\n                        <span className=\"is-flex is-flex-wrap-nowrap\">\n                          Died\n                          <OrderControl sort=\"died\" />\n                        </span>\n                      </th>\n\n                      <th>Mother</th>\n                      <th>Father</th>\n                    </tr>\n                  </thead>\n\n                  <tbody>\n                    {displayedPeople().map(person => (\n                      <PeopleTable\n                        key={person.slug}\n                        person={person}\n                      />\n                    ))}\n                  </tbody>\n                </table>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","export const NotFound = () => (\n  <h1 className=\"title\">Page not found</h1>\n);\n","import { Navigate, Route, Routes } from 'react-router-dom';\nimport './App.scss';\nimport { App } from './App';\nimport { HomePage } from './components/HomePage/HomePage';\nimport { PeoplePage } from './components/PeoplePage/PeoplePage';\nimport { NotFound } from './components/NotFound/NotFound';\n\nexport const Root = () => (\n  <Routes>\n    <Route path=\"/\" element={<App />}>\n      <Route index element={<HomePage />} />\n      <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n      <Route path=\"people\">\n        <Route path=\":personSlug?\" element={<PeoplePage />} />\n      </Route>\n      <Route path=\"*\" element={<NotFound />} />\n    </Route>\n  </Routes>\n);\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { Root } from './Root';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <Root />\n    </Router>,\n  );\n"],"sourceRoot":""}